"use client";

import localFont from "next/font/local";
import "./globals.css";
import { Navbar } from "@/component/navbar";
import cartContext from "@/context/cartcontext";
import { Cart, CartItem } from "@/type/cart";
import { useEffect, useState } from "react";
import "@fortawesome/fontawesome-svg-core/styles.css";
import { config } from "@fortawesome/fontawesome-svg-core";
import { Footer } from "@/component/footer";
config.autoAddCss = false;

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

//export const metadata: Metadata = {
//title: "Delghtful Desserts",
//description: "Generated by create next app",
//};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  
  const [cart, setCart] = useState<Cart>({});

  useEffect(() => {
    const savedCart = localStorage.getItem("cart");
    if (savedCart) {
      setCart(JSON.parse(savedCart));
    }
  }, []);

  const addtocart = (product: CartItem): object => {
    const newCart = { ...cart };

    if (!newCart[product.productid]) {
      newCart[product.productid] = { ...product, quantity: 1 };
    } else {
      newCart[product.productid].quantity += 1;
    }

    setCart(newCart);
    localStorage.setItem("cart", JSON.stringify(newCart));
    return {}; // To match the return type in context
  };

  const removefromcart = (product: CartItem): object => {
    const newCart = { ...cart };
    if (!newCart[product.productid]) return {};

    newCart[product.productid].quantity -= 1;

    if (newCart[product.productid].quantity <= 0) {
      delete newCart[product.productid];
    }

    setCart(newCart);
    localStorage.setItem("cart", JSON.stringify(newCart));
    return {};
  };

  const totalQuantity = (): number =>
    Object.values(cart).reduce((sum, product) => sum + product.quantity, 0);

  const clearCart = () => {
    setCart({});
  };

  return (
    <cartContext.Provider
      value={{ cart, addtocart, removefromcart, totalQuantity, clearCart }}
    >
      <html lang="en" className="bg-pinksoft">
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          <div className="bg-pinkpale max-w-full h-[80px]">
            <Navbar />
          </div>
          {children}
          <div className="bg-slate-900 min-w-full h-[170px]">
            <Footer />
          </div>
        </body>
      </html>
    </cartContext.Provider>
  );
}
